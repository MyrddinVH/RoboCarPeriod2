
Motorcontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000887  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  00000ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001901  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  78:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <motorForward>:
tankDraaiRechts(1000,1000);
	}
}

motorForward(int speed1, int speed2){
	 PORTB = 0b00000110;
  80:	26 e0       	ldi	r18, 0x06	; 6
  82:	25 b9       	out	0x05, r18	; 5
	 PORTD = 0b00000000;
  84:	1b b8       	out	0x0b, r1	; 11
	 OCR1A = speed1;
  86:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  8a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	 OCR1B = speed2;	 		 
  8e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  92:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
  96:	08 95       	ret

00000098 <motorBackward>:

motorBackward(int speed1, int speed2){
	 PORTB = 0b00000111;
  98:	27 e0       	ldi	r18, 0x07	; 7
  9a:	25 b9       	out	0x05, r18	; 5
	 PORTD = 0b10000000;
  9c:	20 e8       	ldi	r18, 0x80	; 128
  9e:	2b b9       	out	0x0b, r18	; 11
	 OCR1A = speed1;
  a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	 OCR1B = speed2;	 	
  a8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  ac:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
  b0:	08 95       	ret

000000b2 <tankDraaiLinks>:

tankDraaiLinks(int speed1, int speed2){
	 PORTB = 0b00000110;
  b2:	26 e0       	ldi	r18, 0x06	; 6
  b4:	25 b9       	out	0x05, r18	; 5
	 PORTD = 0b10000000;
  b6:	20 e8       	ldi	r18, 0x80	; 128
  b8:	2b b9       	out	0x0b, r18	; 11
	 OCR1A = speed1;
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	 OCR1B = speed2;
  c2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  c6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
  ca:	08 95       	ret

000000cc <tankDraaiRechts>:

tankDraaiRechts(int speed1, int speed2){
	 PORTB = 0b00000111;
  cc:	27 e0       	ldi	r18, 0x07	; 7
  ce:	25 b9       	out	0x05, r18	; 5
	 PORTD = 0b00000000;
  d0:	1b b8       	out	0x0b, r1	; 11
	 OCR1A = speed1;
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	 OCR1B = speed2;
  da:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  de:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  e2:	08 95       	ret

000000e4 <main>:

int main(void)
{
	int speed = 2500;
 // PB0 - PB5 output, rest input
 DDRB = 0b00111111;
  e4:	8f e3       	ldi	r24, 0x3F	; 63
  e6:	84 b9       	out	0x04, r24	; 4
 DDRD = 0b10000000;
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	8a b9       	out	0x0a, r24	; 10
 // - CS1[2:0] = 011 : 64 prescaler
 //
 // TOP = (F_CPU / (F_PWM * N)) - 1
 // = (16MHz / (50Hz * 64)) - 1
 // = 4999
 TCCR1A |= (1<<WGM11);
  ec:	e0 e8       	ldi	r30, 0x80	; 128
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
 TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);
  f6:	a1 e8       	ldi	r26, 0x81	; 129
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	8b 61       	ori	r24, 0x1B	; 27
  fe:	8c 93       	st	X, r24
 ICR1 = 4999;
 100:	87 e8       	ldi	r24, 0x87	; 135
 102:	93 e1       	ldi	r25, 0x13	; 19
 104:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 108:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 // The mode is fast-PWM
 // COM1A[1:0] = 10 : Clear OC1A/OC1B on compare match, set OC1A/OC1B at
 // BOTTOM (non-inverting mode)
 // COM1B[1:0] = 11 : Set OC1A/OC1B on compare match, clear OC1A/OC1B at
 // BOTTOM (inverting mode)
 TCCR1A |= (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0);
 10c:	80 81       	ld	r24, Z
 10e:	80 6f       	ori	r24, 0xF0	; 240
 110:	80 83       	st	Z, r24

 // Set the initial duty cycle for both channels to 50%
 OCR1A = speed;
 112:	84 ec       	ldi	r24, 0xC4	; 196
 114:	99 e0       	ldi	r25, 0x09	; 9
 116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 11a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 OCR1B = speed;
 11e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 122:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 uint16_t cnt = 0;
 while (1){ 
motorForward(0,0);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 40 00 	call	0x80	; 0x80 <motorForward>
motorBackward(5000,5000);
 132:	68 e8       	ldi	r22, 0x88	; 136
 134:	73 e1       	ldi	r23, 0x13	; 19
 136:	88 e8       	ldi	r24, 0x88	; 136
 138:	93 e1       	ldi	r25, 0x13	; 19
 13a:	0e 94 4c 00 	call	0x98	; 0x98 <motorBackward>
tankDraaiLinks(2000,2000);
 13e:	60 ed       	ldi	r22, 0xD0	; 208
 140:	77 e0       	ldi	r23, 0x07	; 7
 142:	80 ed       	ldi	r24, 0xD0	; 208
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	0e 94 59 00 	call	0xb2	; 0xb2 <tankDraaiLinks>
tankDraaiRechts(1000,1000);
 14a:	68 ee       	ldi	r22, 0xE8	; 232
 14c:	73 e0       	ldi	r23, 0x03	; 3
 14e:	88 ee       	ldi	r24, 0xE8	; 232
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	0e 94 66 00 	call	0xcc	; 0xcc <tankDraaiRechts>
 156:	e7 cf       	rjmp	.-50     	; 0x126 <main+0x42>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
