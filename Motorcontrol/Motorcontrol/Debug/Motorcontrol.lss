
Motorcontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d3  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <motorForward>:
	}
}

// Motor forward functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
motorForward(int speed1, int speed2){
	 PORTB = 0b00000110;
  80:	26 e0       	ldi	r18, 0x06	; 6
  82:	25 b9       	out	0x05, r18	; 5
	 PORTD = 0b00000000;
  84:	1b b8       	out	0x0b, r1	; 11
	 OCR1A = speed1;
  86:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  8a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	 OCR1B = speed2;	 		 
  8e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  92:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
  96:	08 95       	ret

00000098 <main>:
// Snellheid gaat van 0 naar 4999 0 stillstand 4999 max
int main(void)
{
int initSpeed = 0;
 // PB0 - PB5 output, rest input gehardforced voor nu
 DDRB = 0b00111111;
  98:	8f e3       	ldi	r24, 0x3F	; 63
  9a:	84 b9       	out	0x04, r24	; 4
 DDRD = 0b10000000;
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	8a b9       	out	0x0a, r24	; 10
 // - CS1[2:0] = 011 : 64 prescaler
 //
 // TOP = (F_CPU / (F_PWM * N)) - 1
 // = (16MHz / (50Hz * 64)) - 1
 // = 4999
 TCCR1A |= (1<<WGM11);
  a0:	e0 e8       	ldi	r30, 0x80	; 128
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	80 83       	st	Z, r24
 TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);
  aa:	a1 e8       	ldi	r26, 0x81	; 129
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	8c 91       	ld	r24, X
  b0:	8b 61       	ori	r24, 0x1B	; 27
  b2:	8c 93       	st	X, r24
 ICR1 = 4999;
  b4:	87 e8       	ldi	r24, 0x87	; 135
  b6:	93 e1       	ldi	r25, 0x13	; 19
  b8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 // Set Compare Output Mode for both channels A and B

 TCCR1A |= (1<<COM1A1)  | (1<<COM1B1) ; //  zodat het 0 -> 4999 gaat voor snelheid zonder inverse 4999 -> 0
  c0:	80 81       	ld	r24, Z
  c2:	80 6a       	ori	r24, 0xA0	; 160
  c4:	80 83       	st	Z, r24

// Initial speed set
 OCR1A = 0;
  c6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ca:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 OCR1B = 0;
  ce:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  d2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	while (1)
	{
		motorForward(4000,4000);
  d6:	60 ea       	ldi	r22, 0xA0	; 160
  d8:	7f e0       	ldi	r23, 0x0F	; 15
  da:	80 ea       	ldi	r24, 0xA0	; 160
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	0e 94 40 00 	call	0x80	; 0x80 <motorForward>
  e2:	f9 cf       	rjmp	.-14     	; 0xd6 <main+0x3e>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
