
robotcar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ad  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000764  00000000  00000000  00000c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044b  00000000  00000000  000013dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044f  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  00001d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 6a       	ori	r24, 0xA0	; 160
  84:	8a b9       	out	0x0a, r24	; 10
  86:	87 b1       	in	r24, 0x07	; 7
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	87 60       	ori	r24, 0x07	; 7
  90:	84 b9       	out	0x04, r24	; 4
  92:	e0 e8       	ldi	r30, 0x80	; 128
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
  9c:	a1 e8       	ldi	r26, 0x81	; 129
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	8c 91       	ld	r24, X
  a2:	8b 61       	ori	r24, 0x1B	; 27
  a4:	8c 93       	st	X, r24
  a6:	87 e8       	ldi	r24, 0x87	; 135
  a8:	93 e1       	ldi	r25, 0x13	; 19
  aa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  b2:	80 81       	ld	r24, Z
  b4:	80 6a       	ori	r24, 0xA0	; 160
  b6:	80 83       	st	Z, r24
  b8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  bc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  c0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  c4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  c8:	0e 94 9c 00 	call	0x138	; 0x138 <slaveMode>
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <main+0x48>

000000ce <motorForward>:
// Motor backward functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
void motorBackward(int speed1, int speed2){
	PORTB |= 0b00000111; // PortB bit 1 aanzetten
	PORTD |= 0b10000000; // PortB bit  aanzetten
	OCR1A = 4999 - speed1;
	OCR1B = 4999 - speed2;
  ce:	9c 01       	movw	r18, r24
  d0:	95 b1       	in	r25, 0x05	; 5
  d2:	96 60       	ori	r25, 0x06	; 6
  d4:	95 b9       	out	0x05, r25	; 5
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  de:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  e2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  e6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  ea:	08 95       	ret

000000ec <tankTurnLeft>:
}

// Tank draai functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
void tankTurnLeft(int speed1, int speed2){
	PORTB |= 0b00000110;
  ec:	25 b1       	in	r18, 0x05	; 5
  ee:	26 60       	ori	r18, 0x06	; 6
  f0:	25 b9       	out	0x05, r18	; 5
	PORTD |= 0b10000000;
  f2:	2b b1       	in	r18, 0x0b	; 11
  f4:	20 68       	ori	r18, 0x80	; 128
  f6:	2b b9       	out	0x0b, r18	; 11
	OCR1A = 4999 - speed1;
  f8:	27 e8       	ldi	r18, 0x87	; 135
  fa:	33 e1       	ldi	r19, 0x13	; 19
  fc:	28 1b       	sub	r18, r24
  fe:	39 0b       	sbc	r19, r25
 100:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 104:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed2;
 108:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 10c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 110:	08 95       	ret

00000112 <tankTurnRight>:
}
// Tank draai functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
void tankTurnRight(int speed1, int speed2){
 112:	9c 01       	movw	r18, r24
	PORTB |= 0b00000111;
 114:	95 b1       	in	r25, 0x05	; 5
 116:	97 60       	ori	r25, 0x07	; 7
 118:	95 b9       	out	0x05, r25	; 5
	PORTD |= 0b00000000;
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	8b b9       	out	0x0b, r24	; 11
	OCR1A = speed1;
 11e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 122:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 4999 - speed2;
 126:	87 e8       	ldi	r24, 0x87	; 135
 128:	93 e1       	ldi	r25, 0x13	; 19
 12a:	86 1b       	sub	r24, r22
 12c:	97 0b       	sbc	r25, r23
 12e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 132:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 136:	08 95       	ret

00000138 <slaveMode>:
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	83 b1       	in	r24, 0x03	; 3
 13e:	83 b1       	in	r24, 0x03	; 3
 140:	88 71       	andi	r24, 0x18	; 24
 142:	88 31       	cpi	r24, 0x18	; 24
 144:	19 f0       	breq	.+6      	; 0x14c <slaveMode+0x14>
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	02 c0       	rjmp	.+4      	; 0x150 <slaveMode+0x18>
 14c:	c1 e0       	ldi	r28, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	83 b1       	in	r24, 0x03	; 3
 152:	80 73       	andi	r24, 0x30	; 48
 154:	80 33       	cpi	r24, 0x30	; 48
 156:	11 f0       	breq	.+4      	; 0x15c <slaveMode+0x24>
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	03 c0       	rjmp	.+6      	; 0x162 <slaveMode+0x2a>
 15c:	d1 e0       	ldi	r29, 0x01	; 1
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	99 23       	and	r25, r25
 164:	21 f0       	breq	.+8      	; 0x16e <slaveMode+0x36>
 166:	84 e1       	ldi	r24, 0x14	; 20
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 67 00 	call	0xce	; 0xce <motorForward>
 16e:	cc 23       	and	r28, r28
 170:	21 f0       	breq	.+8      	; 0x17a <slaveMode+0x42>
 172:	84 e1       	ldi	r24, 0x14	; 20
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 76 00 	call	0xec	; 0xec <tankTurnLeft>
 17a:	dd 23       	and	r29, r29
 17c:	21 f0       	breq	.+8      	; 0x186 <slaveMode+0x4e>
 17e:	84 e1       	ldi	r24, 0x14	; 20
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 89 00 	call	0x112	; 0x112 <tankTurnRight>
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
