
robotcar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000002  00800100  0000015a  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000991  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000774  00000000  00000000  00000c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045d  00000000  00000000  000013bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017b  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e45  2**0
=======
  0 .data         00000000  00800100  00800100  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ff  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001372  2**0
>>>>>>> motorControl
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
<<<<<<< HEAD
=======
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>
>>>>>>> motorControl

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "modeSwitch.h"


int main(void){

    DDRD |= (1<<DDD5) | (1<<DDD7);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	80 6a       	ori	r24, 0xA0	; 160
  9a:	8a b9       	out	0x0a, r24	; 10

    DDRD |= (1<<DDD5) | (1<<DDD7) | (1<<DDD6);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 6e       	ori	r24, 0xE0	; 224
  a0:	8a b9       	out	0x0a, r24	; 10

	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2);
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	87 60       	ori	r24, 0x07	; 7
  a6:	84 b9       	out	0x04, r24	; 4
	
	// PWM setup
	TCCR0A |= (1<<WGM00);
  a8:	84 b5       	in	r24, 0x24	; 36
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	85 bd       	out	0x25, r24	; 37
	// Set Compare Output Mode for both channels A and B

	TCCR0A |= (1<<COM0A1)  | (1<<COM0B1) ;
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	80 6a       	ori	r24, 0xA0	; 160
  b8:	84 bd       	out	0x24, r24	; 36

	// Initial speed set
	OCR0A = 0;
  ba:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
<<<<<<< HEAD
  bc:	18 bc       	out	0x28, r1	; 40
			

    while (1){
		slaveMode();
  be:	0e 94 7f 00 	call	0xfe	; 0xfe <slaveMode>
  c2:	fd cf       	rjmp	.-6      	; 0xbe <main+0x28>

000000c4 <motorForward>:
motorBackward(int speed1, int speed2){
	PORTB |= (1<<PORTB0); // PortB bit 0 aanzetten
	PORTD |= (1<<PORTD7); // PortB bit 7 aanzetten
	OCR0A = 255 - speed1;
	OCR0B = 255 - speed2;
}
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	9e 7f       	andi	r25, 0xFE	; 254
  c8:	95 b9       	out	0x05, r25	; 5
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	9f 77       	andi	r25, 0x7F	; 127
  ce:	9b b9       	out	0x0b, r25	; 11
  d0:	87 bd       	out	0x27, r24	; 39
  d2:	68 bd       	out	0x28, r22	; 40
  d4:	08 95       	ret

000000d6 <tankTurnLeft>:

// Tank draai functie voor snellheid aanpassen integers van 0 -> 255 maximaal
tankTurnLeft(int speed1, int speed2){
	PORTB &= ~(1<<PORTB0);
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	9e 7f       	andi	r25, 0xFE	; 254
  da:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1<<PORTD7);
  dc:	9b b1       	in	r25, 0x0b	; 11
  de:	90 68       	ori	r25, 0x80	; 128
  e0:	9b b9       	out	0x0b, r25	; 11
	OCR0A = 255 - speed1;
  e2:	80 95       	com	r24
  e4:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed2;
  e6:	68 bd       	out	0x28, r22	; 40
}
  e8:	08 95       	ret

000000ea <tankTurnRight>:
// Tank draai functie voor snellheid aanpassen integers van 0 -> 255 maximaal
tankTurnRight(int speed1, int speed2){
	PORTB |= (1<<PORTB0);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	91 60       	ori	r25, 0x01	; 1
  ee:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(1<<PORTD7);
  f0:	9b b1       	in	r25, 0x0b	; 11
  f2:	9f 77       	andi	r25, 0x7F	; 127
  f4:	9b b9       	out	0x0b, r25	; 11
	OCR0A = speed1;
  f6:	87 bd       	out	0x27, r24	; 39
	OCR0B = 255 - speed2;
  f8:	60 95       	com	r22
  fa:	68 bd       	out	0x28, r22	; 40
}
  fc:	08 95       	ret

000000fe <slaveMode>:
#include <util/delay.h>
#include <stdbool.h>

volatile uint8_t speed = 100;

void slaveMode(){
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
	int slaveMaskForward = 0b00000100;
	int slaveMaskLeft = 0b00000001;
	int slaveMaskRight = 0b00000010;

	
	if((PINC & slaveMaskForward) == 4){
 102:	86 b1       	in	r24, 0x06	; 6
		forward = true;
		left = false;
		right = false;
	}
	
	if((PINC & slaveMaskLeft) == 1){
 104:	30 99       	sbic	0x06, 0	; 6
 106:	03 c0       	rjmp	.+6      	; 0x10e <slaveMode+0x10>
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	02 c0       	rjmp	.+4      	; 0x112 <slaveMode+0x14>
		forward = false;
		left = true;
 10e:	c1 e0       	ldi	r28, 0x01	; 1
		left = false;
		right = false;
	}
	
	if((PINC & slaveMaskLeft) == 1){
		forward = false;
 110:	80 e0       	ldi	r24, 0x00	; 0
		left = true;
		right = false;
	}
	
	if((PINC & slaveMaskRight) == 2){
 112:	31 99       	sbic	0x06, 1	; 6
 114:	02 c0       	rjmp	.+4      	; 0x11a <slaveMode+0x1c>
 116:	d0 e0       	ldi	r29, 0x00	; 0
 118:	03 c0       	rjmp	.+6      	; 0x120 <slaveMode+0x22>
		forward = false;
		left = false;
		right = true;
 11a:	d1 e0       	ldi	r29, 0x01	; 1
		right = false;
	}
	
	if((PINC & slaveMaskRight) == 2){
		forward = false;
		left = false;
 11c:	c0 e0       	ldi	r28, 0x00	; 0
		left = true;
		right = false;
	}
	
	if((PINC & slaveMaskRight) == 2){
		forward = false;
 11e:	80 e0       	ldi	r24, 0x00	; 0
		left = false;
		right = true;
	}
	
	if(forward){
 120:	88 23       	and	r24, r24
 122:	41 f0       	breq	.+16     	; 0x134 <slaveMode+0x36>
		motorForward(speed, speed);
 124:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 62 00 	call	0xc4	; 0xc4 <motorForward>
	}
	
	if(left){
 134:	cc 23       	and	r28, r28
 136:	29 f0       	breq	.+10     	; 0x142 <slaveMode+0x44>
		tankTurnLeft(speed);
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 6b 00 	call	0xd6	; 0xd6 <tankTurnLeft>
	}
	
	if(right){
 142:	dd 23       	and	r29, r29
 144:	29 f0       	breq	.+10     	; 0x150 <slaveMode+0x52>
		tankTurnRight(speed);
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 75 00 	call	0xea	; 0xea <tankTurnRight>
	}
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
=======
  a6:	18 bc       	out	0x28, r1	; 40
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x28>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
>>>>>>> motorControl
