
robotcar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010c  0080010c  00000592  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000592  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000146c  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b05  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7f  00000000  00000000  000026bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000613  00000000  00000000  000034c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a1  00000000  00000000  00003ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	48 65       	ori	r20, 0x58	; 88
  6a:	6c 6c       	ori	r22, 0xCC	; 204
  6c:	6f 20       	and	r6, r15
  6e:	57 6f       	ori	r21, 0xF7	; 247
  70:	72 6c       	ori	r23, 0xC2	; 194
  72:	64 00       	.word	0x0064	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e2 ef       	ldi	r30, 0xF2	; 242
  88:	f4 e0       	ldi	r31, 0x04	; 4
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	ac 30       	cpi	r26, 0x0C	; 12
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	ac e0       	ldi	r26, 0x0C	; 12
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	af 30       	cpi	r26, 0x0F	; 15
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 98 01 	call	0x330	; 0x330 <main>
  aa:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	8b 01       	movw	r16, r22
  bc:	d4 2f       	mov	r29, r20
  be:	88 0f       	add	r24, r24
  c0:	0e 94 37 02 	call	0x46e	; 0x46e <i2c_start>
  c4:	88 23       	and	r24, r24
  c6:	51 f0       	breq	.+20     	; 0xdc <I2C_WRITESEQ+0x2a>
  c8:	c1 e0       	ldi	r28, 0x01	; 1
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <I2C_WRITESEQ+0x32>
  cc:	f8 01       	movw	r30, r16
  ce:	ec 0f       	add	r30, r28
  d0:	f1 1d       	adc	r31, r1
  d2:	80 81       	ld	r24, Z
  d4:	0e 94 65 02 	call	0x4ca	; 0x4ca <i2c_write>
  d8:	cf 5f       	subi	r28, 0xFF	; 255
  da:	01 c0       	rjmp	.+2      	; 0xde <I2C_WRITESEQ+0x2c>
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	cd 17       	cp	r28, r29
  e0:	a8 f3       	brcs	.-22     	; 0xcc <I2C_WRITESEQ+0x1a>
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_stop>
  e8:	8c 2f       	mov	r24, r28
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	08 95       	ret

000000f4 <wr_lcd_mode>:
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	00 d0       	rcall	.+0      	; 0xfe <wr_lcd_mode+0xa>
  fe:	00 d0       	rcall	.+0      	; 0x100 <wr_lcd_mode+0xc>
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	08 2f       	mov	r16, r24
 108:	68 30       	cpi	r22, 0x08	; 8
 10a:	71 f4       	brne	.+28     	; 0x128 <wr_lcd_mode+0x34>
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <wr_lcd_mode+0x20>
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	01 c0       	rjmp	.+2      	; 0x116 <wr_lcd_mode+0x22>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	71 e0       	ldi	r23, 0x01	; 1
 120:	87 e2       	ldi	r24, 0x27	; 39
 122:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_WRITESEQ>
 126:	26 c0       	rjmp	.+76     	; 0x174 <wr_lcd_mode+0x80>
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	16 2f       	mov	r17, r22
 12e:	18 2b       	or	r17, r24
 130:	19 83       	std	Y+1, r17	; 0x01
 132:	80 2f       	mov	r24, r16
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	81 2b       	or	r24, r17
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	8a 83       	std	Y+2, r24	; 0x02
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	8b 83       	std	Y+3, r24	; 0x03
 140:	20 e1       	ldi	r18, 0x10	; 16
 142:	02 9f       	mul	r16, r18
 144:	c0 01       	movw	r24, r0
 146:	11 24       	eor	r1, r1
 148:	81 2b       	or	r24, r17
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	8c 83       	std	Y+4, r24	; 0x04
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	8d 83       	std	Y+5, r24	; 0x05
 152:	45 e0       	ldi	r20, 0x05	; 5
 154:	be 01       	movw	r22, r28
 156:	6f 5f       	subi	r22, 0xFF	; 255
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	87 e2       	ldi	r24, 0x27	; 39
 15c:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_WRITESEQ>
 160:	10 fd       	sbrc	r17, 0
 162:	08 c0       	rjmp	.+16     	; 0x174 <wr_lcd_mode+0x80>
 164:	03 30       	cpi	r16, 0x03	; 3
 166:	30 f4       	brcc	.+12     	; 0x174 <wr_lcd_mode+0x80>
 168:	e3 ef       	ldi	r30, 0xF3	; 243
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <wr_lcd_mode+0x78>
 170:	00 c0       	rjmp	.+0      	; 0x172 <wr_lcd_mode+0x7e>
 172:	00 00       	nop
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <lcd_gotoxy>:
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	d8 2f       	mov	r29, r24
 18e:	c6 2f       	mov	r28, r22
 190:	e6 2f       	mov	r30, r22
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ef 5f       	subi	r30, 0xFF	; 255
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	80 81       	ld	r24, Z
 19a:	8d 2b       	or	r24, r29
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <wr_lcd_mode>
 1a4:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <_lcd_x>
 1a8:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <_lcd_y>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_clrscr>:
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 7a 00 	call	0xf4	; 0xf4 <wr_lcd_mode>
 1ba:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <_lcd_y>
 1be:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <_lcd_x>
 1c2:	08 95       	ret

000001c4 <lcd_putc>:
 1c4:	cf 93       	push	r28
 1c6:	c8 2f       	mov	r28, r24
 1c8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_lcd_x>
 1cc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1d0:	98 17       	cp	r25, r24
 1d2:	10 f4       	brcc	.+4      	; 0x1d8 <lcd_putc+0x14>
 1d4:	ca 30       	cpi	r28, 0x0A	; 10
 1d6:	41 f4       	brne	.+16     	; 0x1e8 <lcd_putc+0x24>
 1d8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <_lcd_y>
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <_lcd_y>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_gotoxy>
 1e8:	ca 30       	cpi	r28, 0x0A	; 10
 1ea:	49 f0       	breq	.+18     	; 0x1fe <lcd_putc+0x3a>
 1ec:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_lcd_x>
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_lcd_x>
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	8c 2f       	mov	r24, r28
 1fa:	0e 94 7a 00 	call	0xf4	; 0xf4 <wr_lcd_mode>
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <lcd_puts>:
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
 208:	03 c0       	rjmp	.+6      	; 0x210 <lcd_puts+0xe>
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_putc>
 210:	88 81       	ld	r24, Y
 212:	81 11       	cpse	r24, r1
 214:	fa cf       	rjmp	.-12     	; 0x20a <lcd_puts+0x8>
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <lcd_puts_p>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	fc 01       	movw	r30, r24
 222:	03 c0       	rjmp	.+6      	; 0x22a <lcd_puts_p+0xe>
 224:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_putc>
 228:	fe 01       	movw	r30, r28
 22a:	ef 01       	movw	r28, r30
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	84 91       	lpm	r24, Z
 230:	81 11       	cpse	r24, r1
 232:	f8 cf       	rjmp	.-16     	; 0x224 <lcd_puts_p+0x8>
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	00 d0       	rcall	.+0      	; 0x244 <lcd_init+0xa>
 244:	00 d0       	rcall	.+0      	; 0x246 <lcd_init+0xc>
 246:	00 d0       	rcall	.+0      	; 0x248 <lcd_init+0xe>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	94 e3       	ldi	r25, 0x34	; 52
 254:	9a 83       	std	Y+2, r25	; 0x02
 256:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	8c 83       	std	Y+4, r24	; 0x04
 25c:	94 e2       	ldi	r25, 0x24	; 36
 25e:	9d 83       	std	Y+5, r25	; 0x05
 260:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 262:	80 e1       	ldi	r24, 0x10	; 16
 264:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 268:	e1 e0       	ldi	r30, 0x01	; 1
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	80 81       	ld	r24, Z
 26e:	80 5f       	subi	r24, 0xF0	; 240
 270:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 272:	81 81       	ldd	r24, Z+1	; 0x01
 274:	80 5f       	subi	r24, 0xF0	; 240
 276:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 278:	84 b1       	in	r24, 0x04	; 4
 27a:	80 62       	ori	r24, 0x20	; 32
 27c:	84 b9       	out	0x04, r24	; 4
 27e:	85 b1       	in	r24, 0x05	; 5
 280:	80 62       	ori	r24, 0x20	; 32
 282:	85 b9       	out	0x05, r24	; 5
    I2C_INIT();
 284:	0e 94 31 02 	call	0x462	; 0x462 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	8b e4       	ldi	r24, 0x4B	; 75
 28a:	9d e1       	ldi	r25, 0x1D	; 29
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x52>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_init+0x58>
 292:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 294:	43 e0       	ldi	r20, 0x03	; 3
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	87 e2       	ldi	r24, 0x27	; 39
 29e:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_WRITESEQ>
 2a2:	18 2f       	mov	r17, r24
 2a4:	81 ee       	ldi	r24, 0xE1	; 225
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_init+0x6e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lcd_init+0x74>
 2ae:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 2b0:	43 e0       	ldi	r20, 0x03	; 3
 2b2:	be 01       	movw	r22, r28
 2b4:	6f 5f       	subi	r22, 0xFF	; 255
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
 2b8:	87 e2       	ldi	r24, 0x27	; 39
 2ba:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_WRITESEQ>
 2be:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 2c0:	43 e0       	ldi	r20, 0x03	; 3
 2c2:	be 01       	movw	r22, r28
 2c4:	6f 5f       	subi	r22, 0xFF	; 255
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	87 e2       	ldi	r24, 0x27	; 39
 2ca:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_WRITESEQ>
 2ce:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 2d0:	43 e0       	ldi	r20, 0x03	; 3
 2d2:	be 01       	movw	r22, r28
 2d4:	6c 5f       	subi	r22, 0xFC	; 252
 2d6:	7f 4f       	sbci	r23, 0xFF	; 255
 2d8:	87 e2       	ldi	r24, 0x27	; 39
 2da:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_WRITESEQ>
 2de:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <wr_lcd_mode>
 2e8:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <lcd_init+0xb8>
 2ec:	85 b1       	in	r24, 0x05	; 5
 2ee:	8f 7d       	andi	r24, 0xDF	; 223
 2f0:	85 b9       	out	0x05, r24	; 5
    wr_lcd_mode(0x0c, 0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	0e 94 7a 00 	call	0xf4	; 0xf4 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	0e 94 7a 00 	call	0xf4	; 0xf4 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 7a 00 	call	0xf4	; 0xf4 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	80 2f       	mov	r24, r16
 30e:	0e 94 7a 00 	call	0xf4	; 0xf4 <wr_lcd_mode>
}
 312:	26 96       	adiw	r28, 0x06	; 6
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 328:	68 e0       	ldi	r22, 0x08	; 8
 32a:	0e 94 7a 00 	call	0xf4	; 0xf4 <wr_lcd_mode>
 32e:	08 95       	ret

00000330 <main>:
#include "modeSwitch.h"


int main(void){

    DDRD |= (1<<DDD5) | (1<<DDD7);
 330:	8a b1       	in	r24, 0x0a	; 10
 332:	80 6a       	ori	r24, 0xA0	; 160
 334:	8a b9       	out	0x0a, r24	; 10

    DDRD |= (1<<DDD5) | (1<<DDD7) | (1<<DDD6);
 336:	8a b1       	in	r24, 0x0a	; 10
 338:	80 6e       	ori	r24, 0xE0	; 224
 33a:	8a b9       	out	0x0a, r24	; 10

	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2);
 33c:	84 b1       	in	r24, 0x04	; 4
 33e:	87 60       	ori	r24, 0x07	; 7
 340:	84 b9       	out	0x04, r24	; 4
	
	// PWM setup
	TCCR0A |= (1<<WGM00);
 342:	84 b5       	in	r24, 0x24	; 36
 344:	81 60       	ori	r24, 0x01	; 1
 346:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);
 348:	85 b5       	in	r24, 0x25	; 37
 34a:	85 60       	ori	r24, 0x05	; 5
 34c:	85 bd       	out	0x25, r24	; 37
	// Set Compare Output Mode for both channels A and B

	TCCR0A |= (1<<COM0A1)  | (1<<COM0B1) ;
 34e:	84 b5       	in	r24, 0x24	; 36
 350:	80 6a       	ori	r24, 0xA0	; 160
 352:	84 bd       	out	0x24, r24	; 36

	// Initial speed set
	OCR0A = 0;
 354:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 356:	18 bc       	out	0x28, r1	; 40
	
    lcd_init(LCD_ON_DISPLAY);
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_init>
    lcd_backlight(0);
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 94 01 	call	0x328	; 0x328 <lcd_backlight>
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	89 e6       	ldi	r24, 0x69	; 105
 36a:	98 e1       	ldi	r25, 0x18	; 24
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x3c>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x46>
 376:	00 00       	nop
    _delay_ms(500);
    lcd_backlight(1);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 94 01 	call	0x328	; 0x328 <lcd_backlight>
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	89 e6       	ldi	r24, 0x69	; 105
 384:	98 e1       	ldi	r25, 0x18	; 24
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x56>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x60>
 390:	00 00       	nop
    _delay_ms(500);		

    while (1){
		slaveMode();
 392:	0e 94 05 02 	call	0x40a	; 0x40a <slaveMode>
        lcd_clrscr();
 396:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_clrscr>
        lcd_gotoxy(0, 0);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_gotoxy>
        lcd_puts_P("Hello World");
 3a2:	88 e6       	ldi	r24, 0x68	; 104
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_puts_p>
        lcd_gotoxy(1, 1);
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_gotoxy>
        lcd_puts("test");
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 01 01 	call	0x202	; 0x202 <lcd_puts>
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	83 ed       	ldi	r24, 0xD3	; 211
 3be:	90 e3       	ldi	r25, 0x30	; 48
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x90>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x9a>
 3ca:	00 00       	nop
 3cc:	e2 cf       	rjmp	.-60     	; 0x392 <main+0x62>

000003ce <motorForward>:
motorBackward(int speed1, int speed2){
	PORTB |= (1<<PORTB0); // PortB bit 0 aanzetten
	PORTD |= (1<<PORTD7); // PortB bit 7 aanzetten
	OCR0A = 255 - speed1;
	OCR0B = 255 - speed2;
}
 3ce:	95 b1       	in	r25, 0x05	; 5
 3d0:	9e 7f       	andi	r25, 0xFE	; 254
 3d2:	95 b9       	out	0x05, r25	; 5
 3d4:	9b b1       	in	r25, 0x0b	; 11
 3d6:	9f 77       	andi	r25, 0x7F	; 127
 3d8:	9b b9       	out	0x0b, r25	; 11
 3da:	87 bd       	out	0x27, r24	; 39
 3dc:	68 bd       	out	0x28, r22	; 40
 3de:	08 95       	ret

000003e0 <tankTurnLeft>:

// Tank draai functie voor snellheid aanpassen integers van 0 -> 255 maximaal
tankTurnLeft(int speed){
	PORTB &= ~(1<<PORTB0);
 3e0:	95 b1       	in	r25, 0x05	; 5
 3e2:	9e 7f       	andi	r25, 0xFE	; 254
 3e4:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1<<PORTD7);
 3e6:	9b b1       	in	r25, 0x0b	; 11
 3e8:	90 68       	ori	r25, 0x80	; 128
 3ea:	9b b9       	out	0x0b, r25	; 11
	OCR0A = 255 - speed;
 3ec:	98 2f       	mov	r25, r24
 3ee:	90 95       	com	r25
 3f0:	97 bd       	out	0x27, r25	; 39
	OCR0B = speed;
 3f2:	88 bd       	out	0x28, r24	; 40
}
 3f4:	08 95       	ret

000003f6 <tankTurnRight>:
// Tank draai functie voor snellheid aanpassen integers van 0 -> 255 maximaal
tankTurnRight(int speed){
	PORTB |= (1<<PORTB0);
 3f6:	95 b1       	in	r25, 0x05	; 5
 3f8:	91 60       	ori	r25, 0x01	; 1
 3fa:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(1<<PORTD7);
 3fc:	9b b1       	in	r25, 0x0b	; 11
 3fe:	9f 77       	andi	r25, 0x7F	; 127
 400:	9b b9       	out	0x0b, r25	; 11
	OCR0A = speed;
 402:	87 bd       	out	0x27, r24	; 39
	OCR0B = 255 - speed;
 404:	80 95       	com	r24
 406:	88 bd       	out	0x28, r24	; 40
}
 408:	08 95       	ret

0000040a <slaveMode>:
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	86 b1       	in	r24, 0x06	; 6
 410:	30 99       	sbic	0x06, 0	; 6
 412:	03 c0       	rjmp	.+6      	; 0x41a <slaveMode+0x10>
 414:	c0 e0       	ldi	r28, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	02 c0       	rjmp	.+4      	; 0x41e <slaveMode+0x14>
 41a:	c1 e0       	ldi	r28, 0x01	; 1
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	31 99       	sbic	0x06, 1	; 6
 420:	02 c0       	rjmp	.+4      	; 0x426 <slaveMode+0x1c>
 422:	d0 e0       	ldi	r29, 0x00	; 0
 424:	03 c0       	rjmp	.+6      	; 0x42c <slaveMode+0x22>
 426:	d1 e0       	ldi	r29, 0x01	; 1
 428:	c0 e0       	ldi	r28, 0x00	; 0
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	88 23       	and	r24, r24
 42e:	41 f0       	breq	.+16     	; 0x440 <slaveMode+0x36>
 430:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <speed>
 434:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <speed>
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motorForward>
 440:	cc 23       	and	r28, r28
 442:	29 f0       	breq	.+10     	; 0x44e <slaveMode+0x44>
 444:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <speed>
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <tankTurnLeft>
 44e:	dd 23       	and	r29, r29
 450:	29 f0       	breq	.+10     	; 0x45c <slaveMode+0x52>
 452:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <speed>
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <tankTurnRight>
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 462:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 466:	8c e0       	ldi	r24, 0x0C	; 12
 468:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 46c:	08 95       	ret

0000046e <i2c_start>:
 46e:	94 ea       	ldi	r25, 0xA4	; 164
 470:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 474:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 478:	99 23       	and	r25, r25
 47a:	e4 f7       	brge	.-8      	; 0x474 <i2c_start+0x6>
 47c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 480:	98 7f       	andi	r25, 0xF8	; 248
 482:	98 30       	cpi	r25, 0x08	; 8
 484:	11 f0       	breq	.+4      	; 0x48a <i2c_start+0x1c>
 486:	90 31       	cpi	r25, 0x10	; 16
 488:	91 f4       	brne	.+36     	; 0x4ae <i2c_start+0x40>
 48a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 48e:	84 e8       	ldi	r24, 0x84	; 132
 490:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 494:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 498:	88 23       	and	r24, r24
 49a:	e4 f7       	brge	.-8      	; 0x494 <i2c_start+0x26>
 49c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4a0:	88 7f       	andi	r24, 0xF8	; 248
 4a2:	88 31       	cpi	r24, 0x18	; 24
 4a4:	31 f0       	breq	.+12     	; 0x4b2 <i2c_start+0x44>
 4a6:	80 34       	cpi	r24, 0x40	; 64
 4a8:	31 f4       	brne	.+12     	; 0x4b6 <i2c_start+0x48>
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	08 95       	ret
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	08 95       	ret
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	08 95       	ret

000004ba <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 4ba:	84 e9       	ldi	r24, 0x94	; 148
 4bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 4c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4c4:	84 fd       	sbrc	r24, 4
 4c6:	fc cf       	rjmp	.-8      	; 0x4c0 <i2c_stop+0x6>

}/* i2c_stop */
 4c8:	08 95       	ret

000004ca <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 4ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 4ce:	84 e8       	ldi	r24, 0x84	; 132
 4d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 4d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4d8:	88 23       	and	r24, r24
 4da:	e4 f7       	brge	.-8      	; 0x4d4 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 4dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4e0:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 4e2:	88 32       	cpi	r24, 0x28	; 40
 4e4:	11 f0       	breq	.+4      	; 0x4ea <i2c_write+0x20>
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	08 95       	ret
	return 0;
 4ea:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 4ec:	08 95       	ret

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
