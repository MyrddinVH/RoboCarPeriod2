
robotcar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000002  00800100  000002c4  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  0000035a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bcb  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090f  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067a  00000000  00000000  0000198e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b2  00000000  00000000  0000263b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000027ed  2**0
=======
  0 .data         00000002  00800100  00000172  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000911  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000748  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000487  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044d  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016b  00000000  00000000  00001ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e10  2**0
>>>>>>> slaveMode
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
<<<<<<< HEAD
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
=======
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
>>>>>>> slaveMode

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< HEAD
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f2 e0       	ldi	r31, 0x02	; 2
=======
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f1 e0       	ldi	r31, 0x01	; 1
>>>>>>> slaveMode
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
<<<<<<< HEAD

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
=======
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
>>>>>>> slaveMode
#include "modeSwitch.h"


int main(void){

    DDRD |= (1<<DDD5) | (1<<DDD7);
<<<<<<< HEAD
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6a       	ori	r24, 0xA0	; 160
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<DDC0);
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	84 b9       	out	0x04, r24	; 4
	
	// interupt mode switch setup
	PCICR |= (1<<PCIE0);
  b8:	e8 e6       	ldi	r30, 0x68	; 104
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	PCIFR |= (1<<PCIF0);
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	8b bb       	out	0x1b, r24	; 27
	PCMSK0 |= (1<<PCINT7);
  c8:	eb e6       	ldi	r30, 0x6B	; 107
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	80 83       	st	Z, r24
	sei();
  d2:	78 94       	sei
	
	// PWM setup
	TCCR1A |= (1<<WGM11);
  d4:	e0 e8       	ldi	r30, 0x80	; 128
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);
  de:	a1 e8       	ldi	r26, 0x81	; 129
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	8b 61       	ori	r24, 0x1B	; 27
  e6:	8c 93       	st	X, r24
	ICR1 = 4999;
  e8:	87 e8       	ldi	r24, 0x87	; 135
  ea:	93 e1       	ldi	r25, 0x13	; 19
  ec:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  f0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A |= (1<<COM1A1)  | (1<<COM1B1) ;
  f4:	80 81       	ld	r24, Z
  f6:	80 6a       	ori	r24, 0xA0	; 160
  f8:	80 83       	st	Z, r24
	OCR1A = 0;
  fa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  fe:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0;
 102:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 106:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			

    while (1){
		modeChecker();
 10a:	0e 94 c0 00 	call	0x180	; 0x180 <modeChecker>
 10e:	fd cf       	rjmp	.-6      	; 0x10a <main+0x64>

00000110 <modeSwitcher>:
	}
}


void modeSwitcher(){
	switch (mode){
 110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	41 f0       	breq	.+16     	; 0x128 <modeSwitcher+0x18>
 118:	18 f0       	brcs	.+6      	; 0x120 <modeSwitcher+0x10>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	49 f0       	breq	.+18     	; 0x130 <modeSwitcher+0x20>
 11e:	08 95       	ret
		case REMOTE:
			mode = SLAVE;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			break;
 126:	08 95       	ret
		case SLAVE:
			mode = AUTO;
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			break;
 12e:	08 95       	ret
		case AUTO:
			mode = REMOTE;
 130:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 134:	08 95       	ret

00000136 <__vector_3>:
enum modeNames { REMOTE,
				 SLAVE,
				 AUTO  };
volatile uint8_t mode = REMOTE;

ISR(PCINT0_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	if((PINB & (1<<PINB7)) == 0){
 158:	1f 9b       	sbis	0x03, 7	; 3
		modeSwitcher();
 15a:	0e 94 88 00 	call	0x110	; 0x110 <modeSwitcher>
	}
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	7f 91       	pop	r23
 16c:	6f 91       	pop	r22
 16e:	5f 91       	pop	r21
 170:	4f 91       	pop	r20
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <modeChecker>:
			break;
	}
}

void modeChecker(){
	if(mode == REMOTE){
 180:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 184:	81 11       	cpse	r24, r1
 186:	03 c0       	rjmp	.+6      	; 0x18e <modeChecker+0xe>
		remoteControl();
 188:	0e 94 22 01 	call	0x244	; 0x244 <remoteControl>
 18c:	08 95       	ret
	}else if(mode == SLAVE){
 18e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	19 f4       	brne	.+6      	; 0x19c <modeChecker+0x1c>
		slaveMode();
 196:	0e 94 29 01 	call	0x252	; 0x252 <slaveMode>
 19a:	08 95       	ret
	}else if(mode == AUTO){
 19c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	11 f4       	brne	.+4      	; 0x1a8 <modeChecker+0x28>
		ultrasoonMode();
 1a4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <ultrasoonMode>
 1a8:	08 95       	ret

000001aa <motorForward>:
#include <avr/io.h>
#include <util/delay.h>

// Snellheid gaat van 0 naar 4999 0 stillstand 4999 max
// Motor forward functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
void motorForward(int speed1, int speed2){
 1aa:	9c 01       	movw	r18, r24
	PORTB |= 0b00000110;
 1ac:	95 b1       	in	r25, 0x05	; 5
 1ae:	96 60       	ori	r25, 0x06	; 6
 1b0:	95 b9       	out	0x05, r25	; 5
	PORTD |= 0b00000000;
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8b b9       	out	0x0b, r24	; 11
	OCR1A = speed1;
 1b6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ba:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed2;
 1be:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1c2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1c6:	08 95       	ret

000001c8 <motorBackward>:
}

// Motor backward functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
void motorBackward(int speed1, int speed2){
	PORTB |= 0b00000111;
 1c8:	25 b1       	in	r18, 0x05	; 5
 1ca:	27 60       	ori	r18, 0x07	; 7
 1cc:	25 b9       	out	0x05, r18	; 5
	PORTD |= 0b10000000;
 1ce:	2b b1       	in	r18, 0x0b	; 11
 1d0:	20 68       	ori	r18, 0x80	; 128
 1d2:	2b b9       	out	0x0b, r18	; 11
	OCR1A = 4999 - speed1;
 1d4:	27 e8       	ldi	r18, 0x87	; 135
 1d6:	33 e1       	ldi	r19, 0x13	; 19
 1d8:	a9 01       	movw	r20, r18
 1da:	48 1b       	sub	r20, r24
 1dc:	59 0b       	sbc	r21, r25
 1de:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1e2:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 4999 - speed2;
 1e6:	26 1b       	sub	r18, r22
 1e8:	37 0b       	sbc	r19, r23
 1ea:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ee:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1f2:	08 95       	ret

000001f4 <tankTurnLeft>:
}

// Tank draai functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
void tankTurnLeft(int speed){
 1f4:	ac 01       	movw	r20, r24
	PORTB |= 0b00000110;
 1f6:	95 b1       	in	r25, 0x05	; 5
 1f8:	96 60       	ori	r25, 0x06	; 6
 1fa:	95 b9       	out	0x05, r25	; 5
	PORTD |= 0b10000000;
 1fc:	9b b1       	in	r25, 0x0b	; 11
 1fe:	90 68       	ori	r25, 0x80	; 128
 200:	9b b9       	out	0x0b, r25	; 11
	OCR1A = 4999 - speed;
 202:	27 e8       	ldi	r18, 0x87	; 135
 204:	33 e1       	ldi	r19, 0x13	; 19
 206:	24 1b       	sub	r18, r20
 208:	35 0b       	sbc	r19, r21
 20a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 20e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed;
 212:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 216:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 21a:	08 95       	ret

0000021c <tankTurnRight>:
}
// Tank draai functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
void tankTurnRight(int speed){
 21c:	ac 01       	movw	r20, r24
	PORTB |= 0b00000111;
 21e:	95 b1       	in	r25, 0x05	; 5
 220:	97 60       	ori	r25, 0x07	; 7
 222:	95 b9       	out	0x05, r25	; 5
	PORTD |= 0b00000000;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	8b b9       	out	0x0b, r24	; 11
	OCR1A = speed;
 228:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 22c:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 4999 - speed;
 230:	27 e8       	ldi	r18, 0x87	; 135
 232:	33 e1       	ldi	r19, 0x13	; 19
 234:	c9 01       	movw	r24, r18
 236:	84 1b       	sub	r24, r20
 238:	95 0b       	sbc	r25, r21
 23a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 23e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 242:	08 95       	ret

00000244 <remoteControl>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include "motorControl.h"

void remoteControl(){
	motorBackward(100, 100);
 244:	64 e6       	ldi	r22, 0x64	; 100
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	84 e6       	ldi	r24, 0x64	; 100
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <motorBackward>
 250:	08 95       	ret

00000252 <slaveMode>:
#include <stdbool.h>
#include "motorControl.h"

volatile uint8_t speedSlave = 40;

void slaveMode(){
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
	_Bool right;
	int slaveMaskForward = 0b00101000;
	int slaveMaskLeft = 0b00011000;
	int slaveMaskRight = 0b00110000;
	
	if((PINB & slaveMaskForward) == 0x28){
 256:	83 b1       	in	r24, 0x03	; 3
=======
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	80 6a       	ori	r24, 0xA0	; 160
  9a:	8a b9       	out	0x0a, r24	; 10

    DDRD |= (1<<DDD5) | (1<<DDD7) | (1<<DDD6);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 6e       	ori	r24, 0xE0	; 224
  a0:	8a b9       	out	0x0a, r24	; 10

	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2);
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	87 60       	ori	r24, 0x07	; 7
  a6:	84 b9       	out	0x04, r24	; 4
	
	// PWM setup
	TCCR0A |= (1<<WGM00);
  a8:	84 b5       	in	r24, 0x24	; 36
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);
  ae:	85 b5       	in	r24, 0x25	; 37
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	85 bd       	out	0x25, r24	; 37
	// Set Compare Output Mode for both channels A and B

	TCCR0A |= (1<<COM0A1)  | (1<<COM0B1) ;
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	80 6a       	ori	r24, 0xA0	; 160
  b8:	84 bd       	out	0x24, r24	; 36

	// Initial speed set
	OCR0A = 0;
  ba:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
  bc:	18 bc       	out	0x28, r1	; 40
			

    while (1){
		slaveMode();
  be:	0e 94 80 00 	call	0x100	; 0x100 <slaveMode>
  c2:	fd cf       	rjmp	.-6      	; 0xbe <main+0x28>

000000c4 <motorForward>:
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	9e 7f       	andi	r25, 0xFE	; 254
  c8:	95 b9       	out	0x05, r25	; 5
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	9f 77       	andi	r25, 0x7F	; 127
  ce:	9b b9       	out	0x0b, r25	; 11
  d0:	87 bd       	out	0x27, r24	; 39
  d2:	68 bd       	out	0x28, r22	; 40
  d4:	08 95       	ret

000000d6 <tankTurnLeft>:
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	9e 7f       	andi	r25, 0xFE	; 254
  da:	95 b9       	out	0x05, r25	; 5
  dc:	9b b1       	in	r25, 0x0b	; 11
  de:	90 68       	ori	r25, 0x80	; 128
  e0:	9b b9       	out	0x0b, r25	; 11
  e2:	98 2f       	mov	r25, r24
  e4:	90 95       	com	r25
  e6:	97 bd       	out	0x27, r25	; 39
  e8:	88 bd       	out	0x28, r24	; 40
  ea:	08 95       	ret

000000ec <tankTurnRight>:
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	91 60       	ori	r25, 0x01	; 1
  f0:	95 b9       	out	0x05, r25	; 5
  f2:	9b b1       	in	r25, 0x0b	; 11
  f4:	9f 77       	andi	r25, 0x7F	; 127
  f6:	9b b9       	out	0x0b, r25	; 11
  f8:	87 bd       	out	0x27, r24	; 39
  fa:	80 95       	com	r24
  fc:	88 bd       	out	0x28, r24	; 40
  fe:	08 95       	ret

00000100 <slaveMode>:
#include <stdbool.h>
#include "motorControl.h"

volatile uint8_t speed = 40;

void slaveMode(){
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
	int slaveMaskForward = 0b00000011;
	int slaveMaskLeft 	 = 0b00000110;
	int slaveMaskRight   = 0b00000101;

	
	if((PINC & slaveMaskForward) == 3){
 104:	86 b1       	in	r24, 0x06	; 6
>>>>>>> slaveMode
		forward = true;
		left = false;
		right = false;
	}
	
<<<<<<< HEAD
	if((PINB & slaveMaskLeft) == 0x18){
 258:	83 b1       	in	r24, 0x03	; 3
 25a:	88 71       	andi	r24, 0x18	; 24
 25c:	88 31       	cpi	r24, 0x18	; 24
 25e:	19 f0       	breq	.+6      	; 0x266 <slaveMode+0x14>
 260:	c0 e0       	ldi	r28, 0x00	; 0
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	02 c0       	rjmp	.+4      	; 0x26a <slaveMode+0x18>
		forward = false;
		left = true;
 266:	c1 e0       	ldi	r28, 0x01	; 1
=======
	if((PINC & slaveMaskLeft) == 6){
 106:	86 b1       	in	r24, 0x06	; 6
 108:	86 70       	andi	r24, 0x06	; 6
 10a:	86 30       	cpi	r24, 0x06	; 6
 10c:	19 f0       	breq	.+6      	; 0x114 <slaveMode+0x14>
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	02 c0       	rjmp	.+4      	; 0x118 <slaveMode+0x18>
		forward = false;
		left = true;
 114:	c1 e0       	ldi	r28, 0x01	; 1
>>>>>>> slaveMode
		left = false;
		right = false;
	}
	
	if((PINC & slaveMaskLeft) == 6){
		forward = false;
<<<<<<< HEAD
 268:	90 e0       	ldi	r25, 0x00	; 0
=======
 116:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> slaveMode
		left = true;
		right = false;
	}
	
<<<<<<< HEAD
	if((PINB & slaveMaskRight) == 0x30){
 26a:	83 b1       	in	r24, 0x03	; 3
 26c:	80 73       	andi	r24, 0x30	; 48
 26e:	80 33       	cpi	r24, 0x30	; 48
 270:	11 f0       	breq	.+4      	; 0x276 <slaveMode+0x24>
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	03 c0       	rjmp	.+6      	; 0x27c <slaveMode+0x2a>
		forward = false;
		left = false;
		right = true;
 276:	d1 e0       	ldi	r29, 0x01	; 1
=======
	if((PINC & slaveMaskRight) == 5){
 118:	86 b1       	in	r24, 0x06	; 6
 11a:	85 70       	andi	r24, 0x05	; 5
 11c:	85 30       	cpi	r24, 0x05	; 5
 11e:	11 f0       	breq	.+4      	; 0x124 <slaveMode+0x24>
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	03 c0       	rjmp	.+6      	; 0x12a <slaveMode+0x2a>
		forward = false;
		left = false;
		right = true;
 124:	d1 e0       	ldi	r29, 0x01	; 1
>>>>>>> slaveMode
		right = false;
	}
	
	if((PINC & slaveMaskRight) == 5){
		forward = false;
		left = false;
<<<<<<< HEAD
 278:	c0 e0       	ldi	r28, 0x00	; 0
=======
 126:	c0 e0       	ldi	r28, 0x00	; 0
>>>>>>> slaveMode
		left = true;
		right = false;
	}
	
	if((PINC & slaveMaskRight) == 5){
		forward = false;
<<<<<<< HEAD
 27a:	90 e0       	ldi	r25, 0x00	; 0
=======
 128:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> slaveMode
		left = false;
		right = true;
	}
	
	if((PINC & 0b00000111) == 7){
 12a:	86 b1       	in	r24, 0x06	; 6
 12c:	87 70       	andi	r24, 0x07	; 7
 12e:	87 30       	cpi	r24, 0x07	; 7
 130:	19 f4       	brne	.+6      	; 0x138 <slaveMode+0x38>
		forward = true;
		left = false;
		right = false;
 132:	d0 e0       	ldi	r29, 0x00	; 0
		right = true;
	}
	
	if((PINC & 0b00000111) == 7){
		forward = true;
		left = false;
 134:	c0 e0       	ldi	r28, 0x00	; 0
		left = false;
		right = true;
	}
	
	if((PINC & 0b00000111) == 7){
		forward = true;
 136:	91 e0       	ldi	r25, 0x01	; 1
		left = false;
		right = false;
	}
	
	if(forward){
<<<<<<< HEAD
 27c:	99 23       	and	r25, r25
 27e:	41 f0       	breq	.+16     	; 0x290 <slaveMode+0x3e>
		motorForward(speedSlave,speedSlave);
 280:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motorForward>
	}
	
	if(left){
 290:	cc 23       	and	r28, r28
 292:	29 f0       	breq	.+10     	; 0x29e <slaveMode+0x4c>
		tankTurnLeft(speedSlave);
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <tankTurnLeft>
	}
	
	if(right){
 29e:	dd 23       	and	r29, r29
 2a0:	29 f0       	breq	.+10     	; 0x2ac <slaveMode+0x5a>
		tankTurnRight(speedSlave);
 2a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 0e 01 	call	0x21c	; 0x21c <tankTurnRight>
	}
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <ultrasoonMode>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include "motorControl.h"

void ultrasoonMode(){
	motorForward(100,100);
 2b2:	64 e6       	ldi	r22, 0x64	; 100
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	84 e6       	ldi	r24, 0x64	; 100
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motorForward>
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
=======
 138:	99 23       	and	r25, r25
 13a:	41 f0       	breq	.+16     	; 0x14c <slaveMode+0x4c>
		motorForward(speed,speed);
 13c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 62 00 	call	0xc4	; 0xc4 <motorForward>
	}
	
	if(left){
 14c:	cc 23       	and	r28, r28
 14e:	29 f0       	breq	.+10     	; 0x15a <slaveMode+0x5a>
		tankTurnLeft(speed);
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 6b 00 	call	0xd6	; 0xd6 <tankTurnLeft>
	}
	
	if(right){
 15a:	dd 23       	and	r29, r29
 15c:	29 f0       	breq	.+10     	; 0x168 <slaveMode+0x68>
		tankTurnRight(speed);
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 76 00 	call	0xec	; 0xec <tankTurnRight>
	}
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
>>>>>>> slaveMode
