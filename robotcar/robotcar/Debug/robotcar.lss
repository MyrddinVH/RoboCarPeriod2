
robotcar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085e  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bd  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000376  00000000  00000000  0000116b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000014e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009c  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "modeSwitch.h"


int main(void){

    DDRD |= (1<<DDD5) | (1<<DDD7);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 6a       	ori	r24, 0xA0	; 160
  84:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<DDC0);
  86:	87 b1       	in	r24, 0x07	; 7
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2);
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	87 60       	ori	r24, 0x07	; 7
  90:	84 b9       	out	0x04, r24	; 4
	

	
	// PWM setup
	TCCR1A |= (1<<WGM11);
  92:	e0 e8       	ldi	r30, 0x80	; 128
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);
  9c:	a1 e8       	ldi	r26, 0x81	; 129
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	8c 91       	ld	r24, X
  a2:	8b 61       	ori	r24, 0x1B	; 27
  a4:	8c 93       	st	X, r24
	ICR1 = 4999;
  a6:	87 e8       	ldi	r24, 0x87	; 135
  a8:	93 e1       	ldi	r25, 0x13	; 19
  aa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A |= (1<<COM1A1)  | (1<<COM1B1) ;
  b2:	80 81       	ld	r24, Z
  b4:	80 6a       	ori	r24, 0xA0	; 160
  b6:	80 83       	st	Z, r24
	OCR1A = 0;
  b8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  bc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0;
  c0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  c4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			

    while (1){
		//slaveMode();
		motorForward(200,200);
  c8:	68 ec       	ldi	r22, 0xC8	; 200
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 71 00 	call	0xe2	; 0xe2 <motorForward>
		motorBackward(200,200);
  d4:	68 ec       	ldi	r22, 0xC8	; 200
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	88 ec       	ldi	r24, 0xC8	; 200
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 81 00 	call	0x102	; 0x102 <motorBackward>
  e0:	f3 cf       	rjmp	.-26     	; 0xc8 <main+0x48>

000000e2 <motorForward>:
#include <avr/io.h>
#include <util/delay.h>

// Snellheid gaat van 0 naar 4999 0 stillstand 4999 max
// Motor forward functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
motorForward(int speed1, int speed2){
  e2:	9c 01       	movw	r18, r24
	PORTB &= ~(1<<PORTB0); // PortB bit 0 uitzetten
  e4:	95 b1       	in	r25, 0x05	; 5
  e6:	9e 7f       	andi	r25, 0xFE	; 254
  e8:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(1<<PORTD7); // PortB bit 7 uitzetten
  ea:	9b b1       	in	r25, 0x0b	; 11
  ec:	9f 77       	andi	r25, 0x7F	; 127
  ee:	9b b9       	out	0x0b, r25	; 11
	OCR1A = speed1;
  f0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed2;
  f8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  fc:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 100:	08 95       	ret

00000102 <motorBackward>:

// Motor backward functie voor snellheid aanpassen integers van 0 -> 4999 maximaal
motorBackward(int speed1, int speed2){
	PORTB |= (1<<PORTB0); // PortB bit 0 aanzetten
 102:	25 b1       	in	r18, 0x05	; 5
 104:	21 60       	ori	r18, 0x01	; 1
 106:	25 b9       	out	0x05, r18	; 5
	PORTD |= (1<<PORTD7); // PortB bit 7 aanzetten
 108:	2b b1       	in	r18, 0x0b	; 11
 10a:	20 68       	ori	r18, 0x80	; 128
 10c:	2b b9       	out	0x0b, r18	; 11
	OCR1A = 4999 - speed1;
 10e:	27 e8       	ldi	r18, 0x87	; 135
 110:	33 e1       	ldi	r19, 0x13	; 19
 112:	a9 01       	movw	r20, r18
 114:	48 1b       	sub	r20, r24
 116:	59 0b       	sbc	r21, r25
 118:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 11c:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 4999 - speed2;
 120:	26 1b       	sub	r18, r22
 122:	37 0b       	sbc	r19, r23
 124:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 128:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 12c:	08 95       	ret

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
