
robotcar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a30  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000740  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000441  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e9  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000204  00000000  00000000  00001cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ec9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "modeSwitch.h"


int main(void){

    DDRD |= (1<<DDD5) | (1<<DDD7) | (1<<DDD6);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 6e       	ori	r24, 0xE0	; 224
  84:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<DDC0);
  86:	87 b1       	in	r24, 0x07	; 7
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2);
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	87 60       	ori	r24, 0x07	; 7
  90:	84 b9       	out	0x04, r24	; 4
	

	
	// PWM setup
	TCCR0A |= (1<<WGM00);
  92:	84 b5       	in	r24, 0x24	; 36
  94:	81 60       	ori	r24, 0x01	; 1
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);
  98:	85 b5       	in	r24, 0x25	; 37
  9a:	85 60       	ori	r24, 0x05	; 5
  9c:	85 bd       	out	0x25, r24	; 37
	// Set Compare Output Mode for both channels A and B

	TCCR0A |= (1<<COM0A1)  | (1<<COM0B1) ;
  9e:	84 b5       	in	r24, 0x24	; 36
  a0:	80 6a       	ori	r24, 0xA0	; 160
  a2:	84 bd       	out	0x24, r24	; 36

	// Initial speed set
	OCR0A = 0;
  a4:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
  a6:	18 bc       	out	0x28, r1	; 40
			

    while (1){
		motorForward(200,200);
  a8:	68 ec       	ldi	r22, 0xC8	; 200
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	88 ec       	ldi	r24, 0xC8	; 200
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 a0 00 	call	0x140	; 0x140 <motorForward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	8b e7       	ldi	r24, 0x7B	; 123
  b8:	92 e9       	ldi	r25, 0x92	; 146
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x44>
  c4:	00 00       	nop
		_delay_ms(3000);
		motorBackward(200,200);
  c6:	68 ec       	ldi	r22, 0xC8	; 200
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	88 ec       	ldi	r24, 0xC8	; 200
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 a9 00 	call	0x152	; 0x152 <motorBackward>
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	8b e7       	ldi	r24, 0x7B	; 123
  d6:	92 e9       	ldi	r25, 0x92	; 146
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
		_delay_ms(3000);
		tankTurnLeft(200,200);
  e4:	68 ec       	ldi	r22, 0xC8	; 200
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	88 ec       	ldi	r24, 0xC8	; 200
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 b4 00 	call	0x168	; 0x168 <tankTurnLeft>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	8b e7       	ldi	r24, 0x7B	; 123
  f4:	92 e9       	ldi	r25, 0x92	; 146
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
		_delay_ms(3000);
		tankTurnRight(200,200);
 102:	68 ec       	ldi	r22, 0xC8	; 200
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	88 ec       	ldi	r24, 0xC8	; 200
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 be 00 	call	0x17c	; 0x17c <tankTurnRight>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	8b e7       	ldi	r24, 0x7B	; 123
 112:	92 e9       	ldi	r25, 0x92	; 146
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x94>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x9e>
 11e:	00 00       	nop
		_delay_ms(3000);
		motorForward(0,0);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 a0 00 	call	0x140	; 0x140 <motorForward>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	8b e7       	ldi	r24, 0x7B	; 123
 130:	92 e9       	ldi	r25, 0x92	; 146
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0xb2>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0xbc>
 13c:	00 00       	nop
 13e:	b4 cf       	rjmp	.-152    	; 0xa8 <main+0x28>

00000140 <motorForward>:
#include <avr/io.h>
#include <util/delay.h>

// Motor forward functie voor snellheid aanpassen integers van 0 -> 255 maximaal
motorForward(int speed1, int speed2){
	PORTB &= ~(1<<PORTB0); // PortB bit 0 uitzetten
 140:	95 b1       	in	r25, 0x05	; 5
 142:	9e 7f       	andi	r25, 0xFE	; 254
 144:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(1<<PORTD7); // PortB bit 7 uitzetten
 146:	9b b1       	in	r25, 0x0b	; 11
 148:	9f 77       	andi	r25, 0x7F	; 127
 14a:	9b b9       	out	0x0b, r25	; 11
	OCR0A = speed1;
 14c:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed2;
 14e:	68 bd       	out	0x28, r22	; 40
}
 150:	08 95       	ret

00000152 <motorBackward>:

// Motor backward functie voor snellheid aanpassen integers van 0 -> 255 maximaal
motorBackward(int speed1, int speed2){
	PORTB |= (1<<PORTB0); // PortB bit 0 aanzetten
 152:	95 b1       	in	r25, 0x05	; 5
 154:	91 60       	ori	r25, 0x01	; 1
 156:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1<<PORTD7); // PortB bit 7 aanzetten
 158:	9b b1       	in	r25, 0x0b	; 11
 15a:	90 68       	ori	r25, 0x80	; 128
 15c:	9b b9       	out	0x0b, r25	; 11
	OCR0A = 255 - speed1;
 15e:	80 95       	com	r24
 160:	87 bd       	out	0x27, r24	; 39
	OCR0B = 255 - speed2;
 162:	60 95       	com	r22
 164:	68 bd       	out	0x28, r22	; 40
}
 166:	08 95       	ret

00000168 <tankTurnLeft>:

// Tank draai functie voor snellheid aanpassen integers van 0 -> 255 maximaal
tankTurnLeft(int speed1, int speed2){
	PORTB &= ~(1<<PORTB0);
 168:	95 b1       	in	r25, 0x05	; 5
 16a:	9e 7f       	andi	r25, 0xFE	; 254
 16c:	95 b9       	out	0x05, r25	; 5
	PORTD |= (1<<PORTD7);
 16e:	9b b1       	in	r25, 0x0b	; 11
 170:	90 68       	ori	r25, 0x80	; 128
 172:	9b b9       	out	0x0b, r25	; 11
	OCR0A = 255 - speed1;
 174:	80 95       	com	r24
 176:	87 bd       	out	0x27, r24	; 39
	OCR0B = speed2;
 178:	68 bd       	out	0x28, r22	; 40
}
 17a:	08 95       	ret

0000017c <tankTurnRight>:
// Tank draai functie voor snellheid aanpassen integers van 0 -> 255 maximaal
tankTurnRight(int speed1, int speed2){
	PORTB |= (1<<PORTB0);
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	91 60       	ori	r25, 0x01	; 1
 180:	95 b9       	out	0x05, r25	; 5
	PORTD &= ~(1<<PORTD7);
 182:	9b b1       	in	r25, 0x0b	; 11
 184:	9f 77       	andi	r25, 0x7F	; 127
 186:	9b b9       	out	0x0b, r25	; 11
	OCR0A = speed1;
 188:	87 bd       	out	0x27, r24	; 39
	OCR0B = 255 - speed2;
 18a:	60 95       	com	r22
 18c:	68 bd       	out	0x28, r22	; 40
}
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
